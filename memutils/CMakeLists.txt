cmake_minimum_required(VERSION 3.12)
find_package(CUDA REQUIRED)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build)
set(QUERY_MODE $ENV{QUERY_MODE})
set(CMAKE_C_FLAGS -fPIC)
set(CMAKE_SHARED_LIBRARY_SUFFIX_C .so)
set(CMAKE_SHARED_LIBRARY_SUFFIX_CXX .so)
set(CUDA_NVCC_FLAGS "-lineinfo -I. -std=c++11 $ENV{NVCCFLAGS}")


if (DEBUG STREQUAL "y")
    set(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} -g -G --compiler-options='-g -ggdb'")
else()
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O3")
endif()

string(REPLACE " " ";" CUDA_XCOMPILER_FLAGS ${CMAKE_C_FLAGS})
list(TRANSFORM CUDA_XCOMPILER_FLAGS PREPEND " -Xcompiler ")
set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS} ${CUDA_XCOMPILER_FLAGS})

if (NOT QUERY_MODE)
    execute_process(COMMAND which nvidia-smi && nvidia-smi | grep "Driver Version:" RESULT_VARIABLE ret)
    if (NOT ret)
        SET(QUERY_MODE DEVICE)
    else()
        SET(QUERY_MODE HOST)
    endif()
endif ()

if (QUERY_MODE STREQUAL "DEVICE")
    cuda_add_library(mem SHARED memory.h memory/cuda_malloc.cu)
else()
    add_library(mem SHARED memory.h memory/malloc.c)
endif()